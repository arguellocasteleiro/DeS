# -*- coding: utf-8 -*-
"""NeSy4WH_VAF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E...
"""

# ___________________________ Google Colab can access your Google Drive
from google.colab import drive
drive.mount('/content/gdrive')

#--- --- --- data for EXPeriments (EXP)
froot1 = 'gdrive/My Drive/NeSy4WH/data_bin/'

# ___________________________ local machine

#--- froot1 = "/Users/marguello/documents/python3/NeSy4WH/data_bin/"

# ___________________________  libraries
import re, string, os, sys

import struct

import numpy as np
np.set_printoptions(precision=24)
# ___________________________ set-up
### Num Cterms
N = 3

### where to read Target tems from file
fnPos = 1
# ___________________________
#--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#--- --- --- RAM!!!
def R_Rbinw2v(finB, fin, fno, fnStr, fnStr2):
  tmp_ch = None
  tmp_h = ""
  tmp_lt = []
  tmp_str = ''
  tmp_i = 0
  tmp_at = []
  tmp_v = []
  tmp_x = []
  tmp_y = []
  tmp_n = float(0)
  tmp_eka = True
	#--- Read lexicon entries and their float vectors
  with open(finB, 'rb') as tmp_f:
    while tmp_ch != "\n":
      tmp_ch = tmp_f.read(1).decode("utf-8")
      tmp_h += tmp_ch

    tmp_lt = tmp_h.split()
		#--- print 'Num vectors...' + str(tmp_lt[0]) + '  Vectors dim...' + str(tmp_lt[1])
    tmp_v = np.zeros(( int(tmp_lt[0]), int(tmp_lt[1]) ))
    tmp_at = ["" for tmp_i in range(int(tmp_lt[0]))]
		#--- --- --- --- --- --- ---
    tmp_cnt = 0
    while tmp_cnt < int(tmp_lt[0]):
      tmp_str = ''
      tmp_x = []
      tmp_y = []
      tmp_n = float(0)
      tmp_eka = True
      while tmp_eka:
        tmp_ch = tmp_f.read(1).decode("utf-8")
        if (tmp_ch == ' '):
          tmp_eka = False
        else:
          tmp_str += tmp_ch

      tmp_str = str(tmp_str.replace("\n", "")).strip()
			#--- print '...' + tmp_str + '...'
      tmp_at[tmp_cnt] = tmp_str

			#--- --- --- 32bit float
      tmp_x = tmp_f.read(4 * int(tmp_lt[1]) )
      tmp_y = np.array([ struct.unpack_from('f', tmp_x, tmp_i)[0] for tmp_i in range(0, len(tmp_x), 4) ], dtype='f')
			#--- --- --- dividing by Euclidean norm
      tmp_x = []
      tmp_n = np.linalg.norm(tmp_y)
      tmp_x = np.true_divide(tmp_y, tmp_n)

			#--- print tmp_y
			#--- print '... ... ... ... ... ... ...'
			#--- print tmp_x
			#--- print '... ... ... ... ... ... ...'
      tmp_v[tmp_cnt] = tmp_x

			#--- --- ---
      tmp_cnt = tmp_cnt + 1
  tmp_f.close()
	#--- --- --- --- --- --- --- --- --- --- --- --- get the position of the Target terms, which are stored in a text file
  tmp_pt = []
  tmp_pt = R_RTterms(fin,tmp_at)

	#--- print tmp_pt
	#--- --- --- --- --- --- --- --- --- --- --- ---
	#--- --- --- --- --- --- --- --- --- --- --- ---
  tmp_d = np.zeros(( N, 2 ))
  tmp_dmax = np.zeros(( 1, 2 ))
  tmp_dmin = np.zeros(( 1, 2 ))
  tmp_sim = float(0)
  tmp_v2 = np.zeros(( 1, int(tmp_lt[1]) ))
  tmp_pos = []
  tmp_f1=open(os.path.expanduser(fno), "w")
	#--- --- --- --- ---
  if (len(tmp_pt) > 0):
    tmp_v2 = np.zeros(( 1, int(tmp_lt[1]) ))
    tmp_pos = []
    tmp_j = 0
    while tmp_j < len(tmp_pt):
      tmp_pos = np.array(tmp_pt[tmp_j])
			#--- --- --- --- --- --- --- --- --- --- --- ---
			#--- --- --- distance.c [ Addition ]
      if (fnStr2 == 'add'):
        tmp_v2 = tmp_v[tmp_pos[0]]
        tmp_k = 1
        while tmp_k < len(tmp_pos):
          tmp_v2 += tmp_v[tmp_pos[tmp_k]]
					#---
          tmp_k = tmp_k + 1
			#--- --- --- word-analogy.c [ 3CosAdd ]
      if (fnStr2 == '3ca'):
        tmp_v2 = tmp_v[tmp_pos[1]] - tmp_v[tmp_pos[0]] + tmp_v[tmp_pos[2]]
			#--- --- --- --- --- --- --- --- --- --- --- ---
			#--- --- --- --- --- --- ---
			#--- --- --- dividing by Euclidean norm
      tmp_x = tmp_v2
      tmp_n = np.linalg.norm(tmp_x)
      tmp_v2= np.true_divide(tmp_x, tmp_n)
      tmp_x = []

			#--- print tmp_v2
			#--- --- --- --- --- --- ---
			#--- --- --- --- --- --- --- --- --- --- --- ---
      tmp_d = np.zeros(( N, 2 ))
      tmp_dmax = np.zeros(( 1, 2 ))
      tmp_dmin = np.zeros(( 1, 2 ))
      tmp_sim = float(0)
      tmp_posStr = '###' + '###'.join(str(tmp_x) for tmp_x in tmp_pos) + '###'
			#--- print tmp_posStr
      tmp_cnt = 0
      while tmp_cnt < int(tmp_lt[0]):
        if (tmp_posStr.find('###' + str(tmp_cnt) + '###') == -1):
          tmp_sim = np.sum(np.dot(tmp_v[tmp_cnt], tmp_v2))
          tmp_dmax = np.amax(tmp_d, axis=0)
          tmp_dmin = np.amin(tmp_d, axis=0)
          if (tmp_sim > tmp_dmax[0]):
            tmp_i = 0
            while tmp_i < N:
              if (tmp_d[tmp_i][0] == tmp_dmin[0]):
                tmp_d[tmp_i][0] = tmp_sim
                tmp_d[tmp_i][1] = tmp_cnt
                tmp_i = N
                #--- --- ---
              tmp_i = tmp_i + 1
          else:
            if (tmp_sim > tmp_dmin[0]):
              tmp_i = 0
              while tmp_i < N:
                if (tmp_d[tmp_i][0] == tmp_dmin[0]):
                  tmp_d[tmp_i][0] = tmp_sim
                  tmp_d[tmp_i][1] = tmp_cnt
                  tmp_i = N
								#--- --- ---
                tmp_i = tmp_i + 1
				#--- --- ---
        tmp_cnt = tmp_cnt + 1
			#--- --- ---
      tmp_posStr = '###' + ' '.join(str(tmp_at[tmp_i]) for tmp_i in tmp_pos) + '###'

			#--- print '--- --- --- --- --- --- --- --- --- --- --- ---'
			#--- print tmp_posStr
			#--- print '--- --- --- --- --- --- --- --- --- --- --- ---'
      tmp_d2 = np.zeros(( N, 2 ))
      tmp_d2 = sorted(tmp_d, key=lambda a_entry: a_entry[0], reverse=True)
      tmp_i = 0
      while tmp_i < N:
				#--- print tmp_at[int(tmp_d2[tmp_i][1])] + '... ... ...' + str(np.around(tmp_d2[tmp_i][0], decimals=6))
        if (np.around(tmp_d2[tmp_i][0], decimals=6) > float(0) ):
          tmp_data = fnStr + tmp_posStr + str(tmp_i + 1)  + '###' + tmp_at[int(tmp_d2[tmp_i][1])] + '###' + str(np.around(tmp_d2[tmp_i][0], decimals=6)) + '###'
          tmp_f1.write(tmp_data + "\n")
				#--- --- ---
        tmp_i = tmp_i + 1
			#--- --- --- --- --- --- ---
			#--- --- --- --- --- --- ---
      tmp_j =  tmp_j + 1
    tmp_f1.close()
#-------------------------------------EndFunction
def R_RTterms(fin,v):
	tmp_f = open(os.path.expanduser(fin),"r+")
	tmp_data = tmp_f.read()
	tmp_f.close()

	tmp_l = tmp_data.split("\n")
	tmp_txt = ''
	tmp_data = ''
	tmp_lt = []
	tmp_l2 = []
	tmp_str = ''

	tmp_p = []
	tmp_pos = []

	tmp_eka = 0

	tmp_at = v
	#--- --- --- --- ---
	tmp_cnt = 0
	while tmp_cnt < len(tmp_l):
		tmp_txt = tmp_l[tmp_cnt].strip()
		if (tmp_txt.find('###') > -1):
			tmp_lt = tmp_txt.split('###')
			tmp_str = tmp_lt[fnPos].strip()
			tmp_str = tmp_str.replace('  ', ' ')
			tmp_str = tmp_str.replace('  ', ' ')
			if (tmp_str != ''):
				tmp_l2 = tmp_str.split(' ')
				tmp_p = []
				tmp_k = 0
				while tmp_k < len(tmp_l2):
					tmp_p.append(-1)
					#---
					tmp_k = tmp_k + 1

				tmp_j = 0
				while tmp_j < len(tmp_at):
					tmp_k = 0
					while tmp_k < len(tmp_l2):
						if (tmp_l2[tmp_k] == tmp_at[tmp_j]):
							tmp_p[tmp_k] = tmp_j
							tmp_k = len(tmp_l2)
						#---
						tmp_k = tmp_k + 1
					#---
					tmp_j = tmp_j + 1

				tmp_eka = 0
				tmp_k = 0
				while tmp_k < len(tmp_l2):
					if (tmp_p[tmp_k] == -1):
						tmp_eka = 1
						tmp_k = len(tmp_l2)
					#---
					tmp_k = tmp_k + 1


				if (tmp_eka == 1):
					print('ERR... input ignored...' + tmp_str)
				else:
					tmp_pos.append(tmp_p)
		#---
		tmp_cnt = tmp_cnt + 1

	return tmp_pos
#-------------------------------------EndFunction
# ___________________________
###--- continuous bag of words (CBOW) model
# ___________________________
#--- cosine
R_Rbinw2v(froot1 + 'Romeo_emb.bin', froot1 + 'Romeo_emb_sim-input.txt', froot1 + 'out-Cterm_Romeo_emb_cos.txt', 'CBOW', 'add')

#--- 3CosAdd
R_Rbinw2v(froot1 + 'Romeo_emb.bin', froot1 + 'Romeo_emb_4termAnalogy-input.txt', froot1 + 'out-Cterm_Romeo_emb_3CosAdd.txt', 'CBOW', '3ca')
# ___________________________
#--- cosine
#--- R_Rbinw2v(froot1 + 'CBOW_PMSB.bin', froot1 + 'EXP1_Dx-input.txt', froot1 + 'out-Cterm_EXP1_Dx.txt', 'CBOW', 'add')
#--- R_Rbinw2v(froot1 + 'CBOW_PMSB.bin', froot1 + 'EXP2_DxHx-input.txt', froot1 + 'out-Cterm_EXP2_DxHx.txt', 'CBOW', 'add')

#--- 3CosAdd
#--- R_Rbinw2v(froot1 + 'CBOW_PMSB.bin', froot1 + 'EXP3_4term-input.txt', froot1 + 'out-Cterm_EXP3_4term.txt', 'CBOW', '3ca')
# ___________________________
print("have a nice day! :-))")